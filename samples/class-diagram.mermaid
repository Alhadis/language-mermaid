classDiagram
	Animal <|-- Duck
	Animal <|-- Fish
	Animal <|-- Zebra
	Animal : +int age
	Animal : +String gender
	Animal: +isMammal()
	Animal: +mate()
	class Duck{
		+String beakColor
		+type()$ boolean
		+swim(float distance, float angle) void
		+quack()
	}
	class Fish{
		-int sizeInFeet
		-canEat()
	}
	class Zebra{
		+bool is_wild
		+run()
	}

	direction RL
	class Student {
		-idCard : IdCard
	}
	class IdCard{
		-id : int
		-name : string
	}
	class Bike{
		-id : int
		-name : string
	}
	Student "1" --o "1" IdCard : carries
	Student "1" --o "1" Bike : rides

	class BankAccount
	BankAccount : +String owner
	BankAccount : +BigDecimal balance
	BankAccount : +deposit(amount)
	BankAccount : +withdrawal(amount)

	%% One-way relations
	classA <|-- classB : Implements
	classA --|> classB : Implements
	classC *-- classD  : Composition
	classC --* classD  : Composition
	classE o-- classF  : Aggregation
	classE --o classF  : Aggregation
	classG <-- classH  : Association
	classG --> classH  : Association
	classK <.. classL  : Dependency
	classK ..> classL  : Dependency
	classM ..|> classN : Realisation
	classM <|.. classN : Realisation (that I'm overdoing these examples)
	classI -- classJ   : Link (Solid)
	classO .. classP   : Link (Dashed)
	<|--
	
	%% Two-way relations
	classA <|--|> classB
	classC *-->   classD
	classE <..|>  classF
	classG <..o   Etc

	%% Annotations
	class Shape
	<<interface>> Shape
	Shape : noOfVertices
	Shape : draw()
	class Shape{
		%% Comment
		<<interface>>
		noVertices
	}

	%% Generic types
	class Square~Shape~:::cssClass {
		int id
		List~int~ position
		setPoints(List~int~ points)
		getPoints() List~int~
	}
	Square : -List~string~ messages
	Square : +setMessages(List~string~ messages)
	Square : +getMessages() List~string~


	%% Interaction handler, specified by action-type (“link” or “callback”)
	link     ClassName "https://www.github.com" "This is a tooltip for a link"
	callback ClassName "callbackFunction"       "This is a tooltip for a callback"
	
	%% Interaction handler, specified using “click” keyword
	click    ClassName href "https://www.github.com" "This is a tooltip for a link"
	click    ClassName call callbackFunction()       "This is a tooltip for a callback"

	callback Duck "callbackName" "Tooltip"
	link     Zebra "https://www.github.com" "This is a link"
