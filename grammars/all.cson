# Grammar's entry-point
name: "Mermaid"
scopeName: "source.mermaid"
fileTypes: ["mmd", "mermaid"]
patterns: [include: "#main"]

repository:
	main:
		patterns: [
			{include: "#directive"}
			{include: "#comment"}
			{include: "#flowchart"}
			{include: "#sequence-diagram"}
			{include: "#class-diagram"}
		]


	# Accessibility option
	a11y:
		name:  "meta.a11y-option.${1:/downcase}.mermaid"
		begin: "(?:\\G|^|(?<=\\s|;|%%))acc(Title|Descr)(?:(?=\\s*[:{])|[ \\t]*$)"
		end:   "(?!\\G)"
		beginCaptures:
			0: name: "variable.assignment.accessibility.mermaid"
		patterns: [
			{include: "#a11y-innards"}

			# (Presumably) Allman-style multi-line value
			applyEndPatternLast: yes
			begin: "\\G$"
			end:   "(?!\\G)"
			patterns: [{
				# Skip empty lines
				begin: "\\G"
				end:   "(?=\\S)"
			},{
				begin: "(?=:|{)"
				end:   "(?!\\G)"
				patterns: [include: "#a11y-innards"]
			}]
		]

	"a11y-innards":
		patterns: [{
			# Single-line value: “accDescr: …”
			contentName: "string.unquoted.directive-value.single-line.mermaid"
			begin: "\\G\\s*(:)[ \\t]*"
			end:   "[ \\t]*$"
			beginCaptures:
				1: name: "keyword.operator.assignment.key-value.colon"
		},{
			# Multi-line value: “accDescr { … }”
			contentName: "string.quoted.other.curly.brackets.directive-value.multi-line.mermaid"
			begin: "\\G\\s*({)[ \\t]*"
			end:   "[ \\t]*(})"
			beginCaptures: 1: name: "punctuation.definition.string.curly.bracket.begin.mermaid"
			endCaptures:   1: name: "punctuation.definition.string.curly.bracket.end.mermaid"
		}]


	# Manual line-break, used within node strings
	br:
		name: "text.embedded.html.basic"
		match: "(?i)<br\\s*/?>"
		captures:
			0: patterns: [include: "text.html.basic"]


	# OOP-flavoured class diagram
	"class-diagram":
		name:  "meta.class-diagram.mermaid"
		begin: "^[ \\t]*(classDiagram(?:-v2)?)(?=$|\\s|;)"
		end:   "(?=A)B"
		beginCaptures:
			1: name: "keyword.control.class-diagram.begin.mermaid"
		patterns: [include: "source.mermaid.class-diagram"]


	# Comma
	comma:
		name: "punctuation.delimiter.comma.mermaid"
		match: ","
		captures:
			0: name: "sublimelinter.gutter-mark.mermaid"


	# %% Comment line
	comment:
		name:  "comment.line.percentage.mermaid"
		begin: "(?:\\G|^|(?<=\\s|;|%%))(%%)"
		end:   "$"
		beginCaptures:
			1: name: "punctuation.definition.comment.mermaid"


	# Diagram orientation: “direction …”
	direction:
		name:  "meta.direction.statement.mermaid"
		match: "(?:\\G|^|(?<=\\s|;|%%))(direction)(?:\\s+(BT|LR|RL|TB|TD))?(?=$|\\s|;)"
		captures:
			1: name: "storage.type.direction.mermaid"
			2: name: "constant.language.orientation.diagram.mermaid"


	# %%{ "Inline configuration": … }%%
	directive:
		name:  "meta.directive.mermaid"
		begin: "%%(?={)"
		end:   "%%$"
		beginCaptures: 0: name: "punctuation.definition.directive.begin.mermaid"
		endCaptures:   0: name: "punctuation.definition.directive.end.mermaid"
		contentName: "source.embedded.js"
		patterns: [include: "source.js"]


	# Character entity
	entity:
		patterns: [{
			# Codepoint (base-10): “#34;”
			name: "constant.character.entity.codepoint.mermaid"
			match: "(#)\\d+(;)"
			captures:
				1: name: "punctuation.definition.entity.begin.mermaid"
				2: name: "punctuation.definition.entity.end.mermaid"
		},{
			# Named: “#quot;”
			name: "constant.character.entity.named.mermaid"
			match: "(#)[a-zA-Z0-9]+(;)"
			captures:
				1: name: "punctuation.definition.entity.begin.mermaid"
				2: name: "punctuation.definition.entity.end.mermaid"
		}]


	# Flowchart diagram
	flowchart:
		name:  "meta.flowchart.mermaid"
		begin: "^[ \\t]*(flowchart(?:-v2)?|graph)(?!-)\\b"
		end:   "(?=A)B"
		beginCaptures:
			1: name: "keyword.control.flowchart.begin.mermaid"
		patterns: [{
			# Flowchart orientation
			match: "\\G\\s+(BT|LR|RL|TB|TD)(?=$|\\s)"
			captures:
				1: name: "constant.language.orientation.flowchart.mermaid"
		}, include: "source.mermaid.flowchart"]


	# Sequence diagram
	"sequence-diagram":
		name:  "meta.sequence-diagram.mermaid"
		begin: "(?i)^[ \\t]*(sequenceDiagram)(?=$|\\s|;)"
		end:   "(?=A)B"
		beginCaptures:
			1: name: "keyword.control.sequence-diagram.begin.mermaid"
		patterns: [include: "source.mermaid.sequence-diagram"]


	# Statement terminator
	terminator:
		name: "punctuation.terminator.statement.mermaid"
		match: ";"
		captures:
			0: name: "sublimelinter.gutter-mark.mermaid"
