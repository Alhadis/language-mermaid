# Grammar's entry-point
# vim:set noet ts=4 fdm=marker:
name: "Mermaid"
scopeName: "source.mermaid"
fileTypes: ["mmd", "mermaid"]
injectionSelector: "source.embedded.mermaid"
patterns: [{
	# YAML front-matter
	name:  "meta.front-matter.mermaid"
	begin: "^([ \\t]*)((---))[ \\t]*$"
	end:   "^\\1((---))(?=[ \\t]*$)"
	beginCaptures:
		2: name: "punctuation.section.front-matter.begin.mermaid"
		3: name: "sublimelinter.gutter-mark"
	endCaptures:
		1: name: "punctuation.section.front-matter.end.mermaid"
		2: name: "sublimelinter.gutter-mark"
	contentnName: "source.embedded.yaml"
	patterns: [include: "source.yaml"]
},{
	# Remainder of document
	name:  "meta.file-body.mermaid"
	begin: "(?<=---)[ \\t]*$|^"
	end:   "(?=A)B|(?=^[ \\t]*(?:`{3,}|~{3,})\\s*$)"
	patterns: [include: "#main"]
}]
firstLineMatch: """(?x)
	# Emacs modeline
	-\\*-(?i:[ \\t]*(?=[^:;\\s]+[ \\t]*-\\*-)|(?:.*?[ \\t;]|(?<=-\\*-))[ \\t]*mode[ \\t]*:[ \\t]*)
		(?i:mermaid)
	(?=[ \\t;]|(?<![-*])-\\*-).*?-\\*-

	|

	# Vim modeline
	(?:(?:^|[ \\t])(?:vi|Vi(?=m))(?:m[<=>]?[0-9]+|m)?|[ \\t]ex)(?=:(?=[ \\t]*set?[ \\t][^\\r\\n:]+:)|:(?![ \\t]*set?[ \\t]))
	(?:(?:[ \\t]*:[ \\t]*|[ \\t])\\w*(?:[ \\t]*=(?:[^\\\\\\s]|\\\\.)*)?)*[ \\t:]
	(?:filetype|ft|syntax)[ \\t]*=
		(?i:mermaid)
	(?=$|\\s|:)
"""

repository:
	main:
		patterns: [
			{include: "#directive"}
			{include: "#comment"}
			{include: "#flowchart"}
			{include: "#sequence-diagram"}
			{include: "#class-diagram"}
			{include: "#state-diagram"}
			{include: "#er-diagram"}
			{include: "#user-journey"}
			{include: "#gantt"}
			{include: "#pie-chart"}
			{include: "#quad-chart"}
			{include: "#requirement-diagram"}
			{include: "#gitgraph"}
			{include: "#c4c-diagram"}
			{include: "#mindmap"}
			{include: "#timeline"}
			{include: "#zenuml"}
		]


	# Section 1: Shared/reusable patterns =================================================================================={{{1

	# Accessibility option
	a11y:
		name:  "meta.a11y-option.${1:/downcase}.mermaid"
		begin: "(?:\\G|^|(?<=\\s|;|%%))acc(Title|Descr)(?:(?=\\s*[:{])|[ \\t]*$)"
		end:   "(?!\\G)"
		beginCaptures:
			0: name: "variable.assignment.accessibility.mermaid"
		patterns: [
			{include: "#a11y-innards"}

			# (Presumably) Allman-style multi-line value
			applyEndPatternLast: yes
			begin: "\\G$"
			end:   "(?!\\G)"
			patterns: [{
				# Skip empty lines
				begin: "\\G"
				end:   "(?=\\S)"
			},{
				begin: "(?=:|{)"
				end:   "(?!\\G)"
				patterns: [include: "#a11y-innards"]
			}]
		]

	"a11y-innards":
		patterns: [{
			# Single-line value: “accDescr: …”
			contentName: "string.unquoted.directive-value.single-line.mermaid"
			begin: "\\G\\s*(:)[ \\t]*"
			end:   "[ \\t]*$"
			beginCaptures:
				1: name: "keyword.operator.assignment.key-value.colon"
		},{
			# Multi-line value: “accDescr { … }”
			contentName: "string.quoted.other.curly.brackets.directive-value.multi-line.mermaid"
			begin: "\\G\\s*({)[ \\t]*"
			end:   "[ \\t]*(})"
			beginCaptures: 1: name: "punctuation.definition.string.curly.bracket.begin.mermaid"
			endCaptures:   1: name: "punctuation.definition.string.curly.bracket.end.mermaid"
		}]


	# Manual line-break, used within node strings
	br:
		name: "text.embedded.html.basic"
		match: "(?i)<br\\s*/?>"
		captures:
			0: patterns: [include: "text.html.basic"]


	# Curly brackets
	brace:
		patterns: [{
			# Opening brace
			name: "punctuation.definition.class.block.begin.mermaid"
			match: "{"
			captures:
				0: name: "sublimelinter.gutter-mark"
		},{
			# Closing brace
			name: "punctuation.definition.class.block.end.mermaid"
			match: "}"
			captures:
				0: name: "sublimelinter.gutter-mark"
		}]


	# Separator character that typically delimits freeform text
	colon:
		name: "keyword.operator.assignment.mermaid"
		match: ":"
		captures:
			0: name: "punctuation.separator.message.key-value.mermaid"


	# Comma
	comma:
		name: "punctuation.delimiter.comma.mermaid"
		match: ","
		captures:
			0: name: "sublimelinter.gutter-mark.mermaid"


	# %% Comment line
	comment:
		name:  "comment.line.percentage.mermaid"
		begin: "(?:\\G|^|(?<=\\s|;|%%))(%%)"
		end:   "$"
		beginCaptures:
			1: name: "punctuation.definition.comment.mermaid"


	# Diagram orientation: “direction …”
	direction:
		name:  "meta.direction.statement.mermaid"
		match: "(?:\\G|^|(?<=\\s|;|%%))(direction)(?:\\s+(BT|LR|RL|TB|TD))?(?=$|\\s|;)"
		captures:
			1: name: "storage.type.direction.mermaid"
			2: name: "constant.language.orientation.diagram.mermaid"


	# %%{ "Inline configuration": … }%%
	directive:
		name:  "meta.directive.mermaid"
		begin: "%%(?={)"
		end:   "%%$"
		beginCaptures: 0: name: "punctuation.definition.directive.begin.mermaid"
		endCaptures:   0: name: "punctuation.definition.directive.end.mermaid"
		contentName: "source.embedded.js"
		patterns: [include: "source.js"]


	# Character entity
	entity:
		patterns: [{
			# Codepoint (base-10): “#34;”
			name: "constant.character.entity.codepoint.mermaid"
			match: "(#)\\d+(;)"
			captures:
				1: name: "punctuation.definition.entity.begin.mermaid"
				2: name: "punctuation.definition.entity.end.mermaid"
		},{
			# Named: “#quot;”
			name: "constant.character.entity.named.mermaid"
			match: "(#)[a-zA-Z0-9]+(;)"
			captures:
				1: name: "punctuation.definition.entity.begin.mermaid"
				2: name: "punctuation.definition.entity.end.mermaid"
		}]


	# Comma-delimited list of CSS properties
	"inline-css":
		patterns: [{
			name: "source.embedded.css"
			match: "(?=\\S)(?:[^,;\\r\\n%]|(?<!%)%(?!%))++"
			captures:
				0: patterns: [{
					# Non-standard CSS properties
					name: "support.type.property-name.non-standard.mermaid-only.css"
					match: "(?i)(?<![\\w-])(stroke-color)(?![\\w-])"
				}, include: "source.css#rule-list-innards"]
		}, include: "#comma"]


	# Statement terminator
	terminator:
		name: "punctuation.terminator.statement.mermaid"
		match: ";"
		captures:
			0: name: "sublimelinter.gutter-mark.mermaid"


	# Diagram description
	title:
		name:  "meta.title.mermaid"
		begin: "(?i)(?:^|\\G|(?<=\\s))\\s*(title)(?=$|\\s)[ \\t]*"
		end:   "(?=\\s*$)"
		beginCaptures:
			1: name: "storage.type.title.mermaid"
		contentName: "string.unquoted.diagram-title.mermaid"
		patterns: [include: "#entity"]


	# Section 2: Entry points =================================================================================={{{1

	# C4C diagram
	"c4c-diagram":
		name:  "meta.c4c-diagram.c4-${2:/downcase}.mermaid"
		begin: "^[ \\t]*(C4(Component|Container|Context|Deployment|Dynamic))(?=$|\\s|;)"
		end:   "(?=A)B|(?=^[ \\t]*(?:`{3,}|~{3,})\\s*$)"
		beginCaptures:
			1: name: "keyword.control.c4c-diagram.begin.mermaid"
		patterns: [include: "source.mermaid.c4c-diagram"]


	# OOP-flavoured class diagram
	"class-diagram":
		name:  "meta.class-diagram.mermaid"
		begin: "^[ \\t]*(classDiagram(?:-v2)?)(?=$|\\s|;)"
		end:   "(?=A)B|(?=^[ \\t]*(?:`{3,}|~{3,})\\s*$)"
		beginCaptures:
			1: name: "keyword.control.class-diagram.begin.mermaid"
		patterns: [include: "source.mermaid.class-diagram"]


	# Entity relationship diagram
	"er-diagram":
		name:  "meta.er-diagram.mermaid"
		begin: "^[ \\t]*(erDiagram)(?=$|\\s|;)"
		end:   "(?=A)B|(?=^[ \\t]*(?:`{3,}|~{3,})\\s*$)"
		beginCaptures:
			1: name: "keyword.control.er-diagram.begin.mermaid"
		patterns: [include: "source.mermaid.er-diagram"]


	# Flowchart diagram
	flowchart:
		name:  "meta.flowchart.mermaid"
		begin: "^[ \\t]*(flowchart(?:-v2)?|graph)(?!-)\\b"
		end:   "(?=A)B|(?=^[ \\t]*(?:`{3,}|~{3,})\\s*$)"
		beginCaptures:
			1: name: "keyword.control.flowchart.begin.mermaid"
		patterns: [{
			# Flowchart orientation
			match: "\\G\\s+(BT|LR|RL|TB|TD)(?=$|\\s)"
			captures:
				1: name: "constant.language.orientation.flowchart.mermaid"
		}, include: "source.mermaid.flowchart"]


	# Gantt chart
	gantt:
		name:  "meta.gantt-chart.mermaid"
		begin: "(?i)^[ \\t]*(gantt)(?=$|\\s)"
		end:   "(?=A)B|(?=^[ \\t]*(?:`{3,}|~{3,})\\s*$)"
		beginCaptures:
			1: name: "keyword.control.gantt-chart.begin.mermaid"
		patterns: [include: "source.mermaid.gantt"]


	# Gitgraph
	gitgraph:
		name:  "meta.gitgraph.mermaid"
		begin: "(?i)^[ \\t]*(gitGraph)(?:\\s+(LR|BT))?(?:\\s*(:))?(?=$|\\s)"
		end:   "(?=A)B|(?=^[ \\t]*(?:`{3,}|~{3,})\\s*$)"
		beginCaptures:
			1: name: "keyword.control.gitgraph.begin.mermaid"
			2: name: "constant.language.orientation.flowchart.mermaid"
			3: patterns: [include: "source.mermaid#colon"]
		patterns: [include: "source.mermaid.gitgraph"]


	# Mindmap
	mindmap:
		name:  "meta.mindmap.mermaid"
		begin: "(?i)^[ \\t]*(mindmap)(?=$|\\s)"
		end:   "(?=A)B|(?=^[ \\t]*(?:`{3,}|~{3,})\\s*$)"
		beginCaptures:
			1: name: "keyword.control.mindmap.begin.mermaid"
		patterns: [include: "source.mermaid.mindmap"]


	# Pie chart
	"pie-chart":
		name:  "meta.pie-chart.mermaid"
		begin: "(?i)^[ \\t]*(pie)(?=$|\\s)"
		end:   "(?=A)B|(?=^[ \\t]*(?:`{3,}|~{3,})\\s*$)"
		beginCaptures:
			1: name: "keyword.control.pie-chart.begin.mermaid"
		patterns: [include: "source.mermaid.pie-chart"]


	# Quadrant chart
	"quad-chart":
		name:  "meta.quad-chart.mermaid"
		begin: "(?i)^[ \\t]*(quadrantChart)(?=$|\\s)"
		end:   "(?=A)B|(?=^[ \\t]*(?:`{3,}|~{3,})\\s*$)"
		beginCaptures:
			1: name: "keyword.control.quad-chart.begin.mermaid"
		patterns: [include: "source.mermaid.quad-chart"]


	# Visualisation of a dependency graph
	"requirement-diagram":
		name:  "meta.requirement-diagram.mermaid"
		begin: "(?i)^[ \\t]*(requirementDiagram)(?=$|\\s)"
		end:   "(?=A)B|(?=^[ \\t]*(?:`{3,}|~{3,})\\s*$)"
		beginCaptures:
			1: name: "keyword.control.requirement-diagram.begin.mermaid"
		patterns: [include: "source.mermaid.requirement-diagram"]


	# Sequence diagram
	"sequence-diagram":
		name:  "meta.sequence-diagram.mermaid"
		begin: "(?i)^[ \\t]*(sequenceDiagram)(?=$|\\s|;)"
		end:   "(?=A)B|(?=^[ \\t]*(?:`{3,}|~{3,})\\s*$)"
		beginCaptures:
			1: name: "keyword.control.sequence-diagram.begin.mermaid"
		patterns: [include: "source.mermaid.sequence-diagram"]


	# State diagram
	"state-diagram":
		name:  "meta.state-diagram.mermaid"
		begin: "(?i)^[ \\t]*(stateDiagram(?:-v2)?)(?=$|\\s|;)"
		end:   "(?=A)B|(?=^[ \\t]*(?:`{3,}|~{3,})\\s*$)"
		beginCaptures:
			1: name: "keyword.control.state-diagram.begin.mermaid"
		patterns: [include: "source.mermaid.state-diagram"]


	# Timeline
	timeline:
		name:  "meta.timeline.mermaid"
		begin: "(?i)^[ \\t]*(timeline)(?=$|\\s)"
		end:   "(?=A)B|(?=^[ \\t]*(?:`{3,}|~{3,})\\s*$)"
		beginCaptures:
			1: name: "keyword.control.timeline.begin.mermaid"
		patterns: [include: "source.mermaid.timeline"]


	# Timeline of annotated tasks
	"user-journey":
		name:  "meta.user-journey.mermaid"
		begin: "(?i)^[ \\t]*(journey)(?=$|\\s)"
		end:   "(?=A)B|(?=^[ \\t]*(?:`{3,}|~{3,})\\s*$)"
		beginCaptures:
			1: name: "keyword.control.user-journey.begin.mermaid"
		patterns: [include: "source.mermaid.user-journey"]


	# ZenUML sequence diagram
	zenuml:
		name:  "meta.zenuml.mermaid"
		begin: "(?i)^[ \\t]*(zenuml)(?=$|\\s)"
		end:   "(?=A)B|(?=^[ \\t]*(?:`{3,}|~{3,})\\s*$)"
		beginCaptures:
			1: name: "keyword.control.zenuml.begin.mermaid"
		patterns: [include: "source.mermaid.zenuml"]
