name: "Mermaid"
scopeName: "source.mermaid"
fileTypes: ["mmd", "mermaid"]
patterns: [include: "#main"]

repository:
	main:
		patterns: [
			{include: "#directive"}
			{include: "#comment"}
			{include: "#flowchart"}
		]


	# Accessibility option
	a11y:
		name:  "meta.a11y-option.${1:/downcase}.mermaid"
		begin: "(?:\\G|^|(?<=\\s|;|%%))acc(Title|Descr)(?:(?=\\s*[:{])|[ \\t]*$)"
		end:   "(?!\\G)"
		beginCaptures:
			0: name: "variable.assignment.accessibility.mermaid"
		patterns: [
			{include: "#a11y-innards"}

			# (Presumably) Allman-style multi-line value
			applyEndPatternLast: yes
			begin: "\\G$"
			end:   "(?!\\G)"
			patterns: [{
				# Skip empty lines
				begin: "\\G"
				end:   "(?=\\S)"
			},{
				begin: "(?=:|{)"
				end:   "(?!\\G)"
				patterns: [include: "#a11y-innards"]
			}]
		]

	"a11y-innards":
		patterns: [{
			# Single-line value: “accDescr: …”
			contentName: "string.unquoted.directive-value.single-line.mermaid"
			begin: "\\G\\s*(:)[ \\t]*"
			end:   "[ \\t]*$"
			beginCaptures:
				1: name: "keyword.operator.assignment.key-value.colon"
		},{
			# Multi-line value: “accDescr { … }”
			contentName: "string.quoted.other.curly.brackets.directive-value.multi-line.mermaid"
			begin: "\\G\\s*({)[ \\t]*"
			end:   "[ \\t]*(})"
			beginCaptures: 1: name: "punctuation.definition.string.curly.bracket.begin.mermaid"
			endCaptures:   1: name: "punctuation.definition.string.curly.bracket.end.mermaid"
		}]


	# Manual line-break, used within node strings
	br:
		name: "text.embedded.html.basic"
		match: "(?i)<br\\s*/?>"
		captures:
			0: patterns: [include: "text.html.basic"]


	# Comma
	comma:
		name: "punctuation.delimiter.comma.mermaid"
		match: ","
		captures:
			0: name: "sublimelinter.gutter-mark.mermaid"


	# %% Comment line
	comment:
		name:  "comment.line.percentage.mermaid"
		begin: "(?:\\G|^|(?<=\\s|;|%%))(%%)"
		end:   "$"
		beginCaptures:
			1: name: "punctuation.definition.comment.mermaid"


	# %%{ "Inline configuration": … }%%
	directive:
		name:  "meta.directive.mermaid"
		begin: "%%(?={)"
		end:   "%%$"
		beginCaptures: 0: name: "punctuation.definition.directive.begin.mermaid"
		endCaptures:   0: name: "punctuation.definition.directive.end.mermaid"
		contentName: "source.embedded.js"
		patterns: [include: "source.js"]


	# Character entity
	entity:
		patterns: [{
			# Codepoint (base-10): “#34;”
			name: "constant.character.entity.codepoint.mermaid"
			match: "(#)\\d+(;)"
			captures:
				1: name: "punctuation.definition.entity.begin.mermaid"
				2: name: "punctuation.definition.entity.end.mermaid"
		},{
			# Named: “#quot;”
			name: "constant.character.entity.named.mermaid"
			match: "(#)[a-zA-Z0-9]+(;)"
			captures:
				1: name: "punctuation.definition.entity.begin.mermaid"
				2: name: "punctuation.definition.entity.end.mermaid"
		}]


	# Syntax 1: Flowcharts (https://mermaid-js.github.io/mermaid/#/flowchart)
	flowchart:
		name:  "meta.flowchart.mermaid"
		begin: "^[ \\t]*(flowchart(?:-v2)?|graph)(?!-)\\b"
		end:   "(?=A)B"
		beginCaptures:
			1: name: "keyword.control.flowchart.begin.mermaid"
		patterns: [{
			# Flowchart orientation
			match: "\\G\\s+(BT|LR|RL|TB|TD)(?=$|\\s)"
			captures:
				1: name: "constant.language.orientation.flowchart.mermaid"
		}, include: "#flowchart-innards"]


	# Split from “#flowchart” rule to share with “#flowchart-subgraph”
	"flowchart-innards":
		patterns: [
			{include: "#a11y"}
			{include: "#flowchart-style"}
			{include: "#flowchart-class"}
			{include: "#flowchart-click"}
			{include: "#flowchart-link"}
			{include: "#flowchart-subgraph"}
			{include: "#flowchart-node"}
			{include: "#terminator"}
			{include: "#directive"}
			{include: "#comment"}
		]


	# CSS class assignment
	"flowchart-class":
		name:  "meta.class.statement.mermaid"
		begin: "(?:\\G|^|(?<=\\s|;|%%))class(?=$|\\s|;)"
		end:   "([\\w$&]+)?[ \\t]*(?=$|;)"
		beginCaptures:
			0: name: "storage.type.style-assignment.mermaid"
		endCaptures:
			1: name: "entity.name.class.mermaid"
		patterns: [{
			name: "entity.name.tag.node.mermaid"
			match: "([\\w$&]+)(?=$|\\s|;|,)"
		}, include: "#comma"]


	# Interactivity command: “click <node-ID> …”
	"flowchart-click":
		name:  "meta.click.statement.mermaid"
		begin: "(?:\\G|^|(?<=\\s|;|%%))(click)(?=$|\\s|;)(?:\\s+([\\w$&]+))?"
		end:   "[ \\t]*$|(?=;)"
		beginCaptures:
			1: name: "storage.type.interactive-command.mermaid"
			2: name: "entity.name.tag.node.mermaid"
		patterns: [
			{include: "#flowchart-click-href"}
			{include: "#flowchart-click-call"}
		]


	# Callback assignment: “… call <function> "<optional-tooltip>"”
	"flowchart-click-call":
		name:  "meta.callback-assignment.mermaid"
		begin: "\\G\\s+(?:(call)(?=$|\\s|;)[ \\t]*|(?=[^\\s\\(%;\"']))"
		end:   "[ \\t]*$|(?=;)"
		beginCaptures:
			1: name: "storage.modifier.callback-assignment.mermaid"
		patterns: [{
			# Callback name and optional arguments
			name:  "meta.callback-reference.mermaid"
			begin: "\\G[^\\s\\(%;\"']+"
			end:   "(?!\\G)|(?=[ \\t]*(?:$|;))"
			beginCaptures:
				0: name: "entity.name.function.callback.mermaid"
			patterns: [{
				# Optional (possibly empty) argument-list
				name:  "meta.callback-arguments.mermaid"
				begin: "\\G\\("
				end:   "\\)"
				beginCaptures: 0: name: "punctuation.definition.parameters.begin.mermaid"
				endCaptures:   0: name: "punctuation.definition.parameters.end.mermaid"
				patterns: [{
					name:  "variable.parameter.function.mermaid"
					match: "[^\\s,\\)%;]+"
				}, include: "#comma"]
			}]
		}, include: "#flowchart-tooltip"]


	# Link destination: “… href "http://url/" _target”
	"flowchart-click-href":
		name:  "meta.link-assignment.mermaid"
		begin: "\\G\\s+(?:(href)(?=$|\\s|;)[ \\t]*|(?=[\"']))"
		end:   "[ \\t]*$|(?=;)"
		beginCaptures:
			1: name: "storage.modifier.link-assignment.mermaid"
		patterns: [
			begin: "\\G(?=\"|')"
			end:   "(?!\\G)"
			patterns: [include: "#flowchart-url"]

			{include: "#flowchart-tooltip"}
			{include: "#target-name"}
		]


	# Line/arrow connecting two nodes
	"flowchart-link":
		patterns: [{
			# Alternative syntax for line/arrow with text: “---| Text |”
			name:  "meta.labelled-link.delimited.mermaid"
			begin: "([xo<]?(?:--+[-xo>]|==+[=xo>]|-?\\.+-[xo>]?))\\s*(\\|)[ \\t]*"
			end:   "\\s*(\\|)"
			beginCaptures:
				1: patterns: [include: "#flowchart-link"]
				2: name: "keyword.operator.link-label.begin.mermaid"
			endCaptures:
				1: name: "keyword.operator.link-label.end.mermaid"
			contentName: "string.quoted.other.link-label.mermaid"
		},{
			# Thin line: “A --- B”
			name: "keyword.operator.link.thin.mermaid"
			match: "[xo<]?--+[-xo>]"
		},{
			# Thick line: “A === B”
			name: "keyword.operator.link.thick.mermaid"
			match: "[xo<]?==+[=xo>]"
		},{
			# Dotted line: “A -..- B”
			name: "keyword.operator.link.dotted.mermaid"
			match: "[xo<]?-?\\.+-[xo>]?"
		},{
			# Thin line with text: “A -- Text -- B”
			name:  "meta.labelled-link.mermaid"
			begin: "([xo<]?--)[ \\t]*"
			end:   "\\s*([xo<]?--+[-xo>])"
			beginCaptures: 1: name: "keyword.operator.link.thin.begin.mermaid"
			endCaptures:   1: name: "keyword.operator.link.thin.end.mermaid"
			contentName: "string.unquoted.link-label.mermaid"
		},{
			# Thick line with text: “A == Text == B”
			name:  "meta.link.thick.labelled.unpiped.mermaid"
			begin: "([xo<]?==)[ \\t]*"
			end:   "\\s*([xo<]?==+[=xo>])"
			beginCaptures: 1: name: "keyword.operator.link.thick.begin.mermaid"
			endCaptures:   1: name: "keyword.operator.link.thick.end.mermaid"
			contentName: "string.unquoted.link-label.mermaid"
		},{
			# Dotted line with text: “A == Text == B”
			name:  "meta.link.dotted.labelled.unpiped.mermaid"
			begin: "([xo<]?-\\.)[ \\t]*"
			end:   "\\s*([xo<]?-?\\.+-[xo>]?)"
			beginCaptures: 1: name: "keyword.operator.link.dotted.begin.mermaid"
			endCaptures:   1: name: "keyword.operator.link.dotted.end.mermaid"
			contentName: "string.unquoted.link-label.mermaid"
		}]


	# Link target; analoguous to “HTMLAnchorElement.prototype.target”
	"target-name":
		name:  "constant.language.link-target.mermaid"
		match: "(?<=\\s|;|%%)(_)[-\\w]+(?=$|\\s|;|%%)"
		captures:
			1: name: "punctuation.definition.link-target.mermaid"


	# Flowchart node
	"flowchart-node":
		name:  "meta.node.statement.mermaid"
		begin: "[\\w$&]+"
		end:   "(?!\\G)|(?=\\s*(?:$|;))"
		applyEndPatternLast: yes
		beginCaptures:
			0: name: "entity.name.tag.node.mermaid"
		patterns: [{
			# [/Trapezoid\] or [/Parallelogram/]
			name:  "string.unquoted.node-text.polygon.mermaid"
			begin: "\\G(\\[[/\\\\])"
			end:   "(([\\\\/]\\]))|((?:[^\\r\\n\\]]|(?<![\\\\/])\\])++)$"
			beginCaptures:
				0: name: "punctuation.definition.string.begin.mermaid"
				1: name: "sublimelinter.gutter-mark.mermaid"
			endCaptures:
				1: name: "punctuation.definition.string.end.mermaid"
				2: name: "sublimelinter.gutter-mark.mermaid"
				3: name: "invalid.illegal.unclosed-string.mermaid", patterns: [include: "#br"]
			patterns: [include: "#flowchart-node-innards"]
		},{
			# ([Stadium])
			name:  "string.unquoted.node-text.stadium.mermaid"
			begin: "\\G(\\(\\[)"
			end:   "((\\]\\)))|((?:[^\\r\\n)]|(?<!\\])\\))++)$"
			beginCaptures:
				0: name: "punctuation.definition.string.begin.mermaid"
				1: name: "sublimelinter.gutter-mark.mermaid"
			endCaptures:
				1: name: "punctuation.definition.string.end.mermaid"
				2: name: "sublimelinter.gutter-mark.mermaid"
				3: name: "invalid.illegal.unclosed-string.mermaid", patterns: [include: "#br"]
			patterns: [include: "#flowchart-node-innards"]
		},{
			# [(Cylinder)]
			name:  "string.unquoted.node-text.cylinder.mermaid"
			begin: "\\G(\\[\\()"
			end:   "((\\)\\]))|((?:[^\\r\\n)]|\\)(?!\\]))++)$"
			beginCaptures:
				0: name: "punctuation.definition.string.begin.mermaid"
				1: name: "sublimelinter.gutter-mark.mermaid"
			endCaptures:
				1: name: "punctuation.definition.string.end.mermaid"
				2: name: "sublimelinter.gutter-mark.mermaid"
				3: name: "invalid.illegal.unclosed-string.mermaid", patterns: [include: "#br"]
			patterns: [include: "#flowchart-node-innards"]
		},{
			# [[Subroutine]]
			name:  "string.unquoted.node-text.subroutine.mermaid"
			begin: "\\G(\\[\\[)"
			end:   "((\\]\\]))|((?:[^\\r\\n\\]]|(?<!\\])\\])++)$"
			beginCaptures:
				0: name: "punctuation.definition.string.begin.mermaid"
				1: name: "sublimelinter.gutter-mark.mermaid"
			endCaptures:
				1: name: "punctuation.definition.string.end.mermaid"
				2: name: "sublimelinter.gutter-mark.mermaid"
				3: name: "invalid.illegal.unclosed-string.mermaid", patterns: [include: "#br"]
			patterns: [include: "#flowchart-node-innards"]
		},{
			# [|key:value|Rectangle with preassigned property|]
			# NOTE: This doesn't appear to be documented as of mermaid-js/mermaid@f1fa91a
			name:  "string.unquoted.node-text.rectangle-with-props.mermaid"
			begin: "\\G((\\[\\|))([A-Za-z]+)((:))([A-Za-z]+)((\\|))(?!\\])"
			end:   "((\\|\\]))|((?:[^\\r\\n\\]]|(?<!\\|)\\])++)$"
			beginCaptures:
				1: name: "punctuation.definition.string.begin.mermaid"
				2: name: "sublimelinter.gutter-mark.mermaid"
				3: name: "entity.other.attribute-name.class.mermaid"
				4: name: "punctuation.separator.key-value.colon.mermaid"
				5: name: "sublimelinter.gutter-mark.mermaid"
				6: name: "constant.other.attribute-value.mermaid"
				7: name: "punctuation.separator.pipe.mermaid"
				8: name: "sublimelinter.gutter-mark.mermaid"
			endCaptures:
				1: name: "punctuation.definition.string.end.mermaid"
				2: name: "sublimelinter.gutter-mark.mermaid"
				3: name: "invalid.illegal.unclosed-string.mermaid", patterns: [include: "#br"]
			patterns: [include: "#flowchart-node-innards"]
		},{
			# [Square/rectangle]
			name:  "string.unquoted.node-text.square.mermaid"
			begin: "\\G(\\[)"
			end:   "((\\]))|([^\\r\\n\\]]+)$"
			beginCaptures:
				0: name: "punctuation.definition.string.begin.mermaid"
				1: name: "sublimelinter.gutter-mark.mermaid"
			endCaptures:
				1: name: "punctuation.definition.string.end.mermaid"
				2: name: "sublimelinter.gutter-mark.mermaid"
				3: name: "invalid.illegal.unclosed-string.mermaid", patterns: [include: "#br"]
			patterns: [include: "#flowchart-node-innards"]
		},{
			# (((Double circle)))
			name:  "string.unquoted.node-text.double-circle.mermaid"
			begin: "\\G(\\({3})"
			end:   "((\\){3}))|((?:[^\\r\\n)]|(?<!\\)\\))\\))++)$"
			beginCaptures:
				0: name: "punctuation.definition.string.begin.mermaid"
				1: name: "sublimelinter.gutter-mark.mermaid"
			endCaptures:
				1: name: "punctuation.definition.string.end.mermaid"
				2: name: "sublimelinter.gutter-mark.mermaid"
				3: name: "invalid.illegal.unclosed-string.mermaid", patterns: [include: "#br"]
			patterns: [include: "#flowchart-node-innards"]
		},{
			# ((Circle))
			name:  "string.unquoted.node-text.circle.mermaid"
			begin: "\\G(\\({2})"
			end:   "((\\){2}))|((?:(?<!\\))\\)(?!\\))|[^\\r\\n)])++)$"
			beginCaptures:
				0: name: "punctuation.definition.string.begin.mermaid"
				1: name: "sublimelinter.gutter-mark.mermaid"
			endCaptures:
				1: name: "punctuation.definition.string.end.mermaid"
				2: name: "sublimelinter.gutter-mark.mermaid"
				3: name: "invalid.illegal.unclosed-string.mermaid", patterns: [include: "#br"]
			patterns: [include: "#flowchart-node-innards"]
		},{
			# (-Ellipse-)
			name:  "string.unquoted.node-text.ellipse.mermaid"
			begin: "\\G(\\(-)"
			end:   "((-\\)))|((?:[^-\\r\\n)]|-(?!\\)))++)$"
			beginCaptures:
				0: name: "punctuation.definition.string.begin.mermaid"
				1: name: "sublimelinter.gutter-mark.mermaid"
			endCaptures:
				1: name: "punctuation.definition.string.end.mermaid"
				2: name: "sublimelinter.gutter-mark.mermaid"
				3: name: "invalid.illegal.unclosed-string.mermaid", patterns: [include: "#br"]
			patterns: [include: "#flowchart-node-innards"]
		},{
			# (Rounded rectangle)
			name:  "string.unquoted.node-text.round.mermaid"
			begin: "\\G(\\()"
			end:   "((\\)))|([^\\r\\n)]+)$"
			beginCaptures:
				0: name: "punctuation.definition.string.begin.mermaid"
				1: name: "sublimelinter.gutter-mark.mermaid"
			endCaptures:
				1: name: "punctuation.definition.string.end.mermaid"
				2: name: "sublimelinter.gutter-mark.mermaid"
				3: name: "invalid.illegal.unclosed-string.mermaid", patterns: [include: "#br"]
			patterns: [include: "#flowchart-node-innards"]
		},{
			# {{Hexagon}}
			name:  "string.unquoted.node-text.hexagon.mermaid"
			begin: "\\G({{)"
			end:   "((}}))|((?:[^\\r\\n}]|}(?!}))++)$"
			beginCaptures:
				0: name: "punctuation.definition.string.begin.mermaid"
				1: name: "sublimelinter.gutter-mark.mermaid"
			endCaptures:
				1: name: "punctuation.definition.string.end.mermaid"
				2: name: "sublimelinter.gutter-mark.mermaid"
				3: name: "invalid.illegal.unclosed-string.mermaid", patterns: [include: "#br"]
			patterns: [include: "#flowchart-node-innards"]
		},{
			# {Diamond/rhombus}
			name:  "string.unquoted.node-text.diamond.mermaid"
			begin: "\\G({)"
			end:   "((}))|([^\\r\\n}]+)$"
			beginCaptures:
				0: name: "punctuation.definition.string.begin.mermaid"
				1: name: "sublimelinter.gutter-mark.mermaid"
			endCaptures:
				1: name: "punctuation.definition.string.end.mermaid"
				2: name: "sublimelinter.gutter-mark.mermaid"
				3: name: "invalid.illegal.unclosed-string.mermaid", patterns: [include: "#br"]
			patterns: [include: "#flowchart-node-innards"]
		},{
			# >Ribbon]
			name:  "string.unquoted.node-text.ribbon.mermaid"
			begin: "\\G(>)"
			end:   "((\\]))|([^\\r\\n\\]]+)$"
			beginCaptures:
				0: name: "punctuation.definition.string.begin.mermaid"
				1: name: "sublimelinter.gutter-mark.mermaid"
			endCaptures:
				1: name: "punctuation.definition.string.end.mermaid"
				2: name: "sublimelinter.gutter-mark.mermaid"
				3: name: "invalid.illegal.unclosed-string.mermaid", patterns: [include: "#br"]
			patterns: [include: "#flowchart-node-innards"]
		},{
			# Shorthand for assigning a class-name: “A:::className”
			match: "(?<=\\S)(:::)(?:(?:(default)|([\\w$&]+))(?:\\b|(?<=[$&])))?"
			captures:
				1: name: "keyword.operator.node-class.mermaid"
				2: name: "constant.language.default-styling.mermaid"
				3: name: "entity.name.class.mermaid"
		},{
			# Combinator, used to chain node declarations: “A-->B & C-->D”
			match: "\\s+(&)(?:$|[ \\t]+)"
			captures:
				1: name: "keyword.operator.logical.and.mermaid"
		}, include: "#flowchart-link"]


	# Stuff matched inside node labels
	"flowchart-node-innards":
		patterns: [{
			# "Double-quoted label"
			name:  "string.quoted.double.mermaid"
			begin: '\\G"'
			end:   '(")|([^"]+)$'
			beginCaptures:
				0: name: "punctuation.definition.string.begin.mermaid"
			endCaptures:
				1: name: "punctuation.definition.string.end.mermaid"
				2: name: "invalid.illegal.unclosed-string.mermaid"
			patterns: [include: "#br", {include: "#entity"}]
		},{
			# 'Single-quoted label'
			name:  "string.quoted.single.mermaid"
			begin: "\\G'"
			end:   "(')|([^']+)$"
			beginCaptures:
				0: name: "punctuation.definition.string.begin.mermaid"
			endCaptures:
				1: name: "punctuation.definition.string.end.mermaid"
				2: name: "invalid.illegal.unclosed-string.mermaid"
			patterns: [include: "#br", {include: "#entity"}]
		}, include: "#br", {include: "#entity"}]


	# Inline node styling
	"flowchart-style":
		name:  "meta.$1.statement.mermaid"
		begin: "(?:\\G|^|(?<=\\s|;|%%))(style|classDef|linkStyle)(?=$|\\s|;)"
		end:   "[ \\t]*$|(?=;)"
		beginCaptures:
			0: name: "storage.type.style-definition.mermaid"
		patterns: [{
			# ID of recipient node
			match: "(?<=style)\\G\\s+([\\w$&]+)"
			captures:
				1: name: "entity.name.tag.node.mermaid"
		},{
			# Class name
			match: "(?<=classDef)\\G\\s+(?:(default)|([\\w$&]+))(?:\\b|(?<=[$&]))"
			captures:
				1: name: "constant.language.default-styling.mermaid"
				2: name: "entity.name.class.mermaid"
		},{
			# Link index
			match: "(?<=linkStyle)\\G\\s+(?:(default)|([,\\d]+))(?:\\s+(interpolate)\\s+([\\w$&]+))?(?=$|\\s|;)"
			captures:
				1: name: "constant.language.default-styling.mermaid"
				2: name: "meta.link-indexes.mermaid", patterns: [{
					name: "constant.numeric.integer.link-index.mermaid"
					match: "\\d+"
				}, include: "#comma"]
				3: name: "keyword.operator.interpolation-type.mermaid"
				4: name: "support.constant.interpolation-type.mermaid"
		},{
			# Comma-delimited list of style components
			name: "source.embedded.css"
			match: "(?=\\S)(?:[^,;\\r\\n%]|(?<!%)%(?!%))++"
			captures:
				0: patterns: [include: "source.css#rule-list-innards"]
		}, include: "#comma"]


	# Nested graph
	"flowchart-subgraph":
		name:  "meta.subgraph.mermaid"
		begin: "(?:\\G|^|(?<=\\s|;|%%))subgraph(?=$|\\s|;)"
		end:   "(?:\\G|^|(?<=\\s|;|%%))end(?=$|\\s|;)"
		beginCaptures: 0: name: "keyword.control.subgraph.begin.mermaid"
		endCaptures:   0: name: "keyword.control.subgraph.end.mermaid"
		patterns: [{
			# ID of subgraph
			begin: "\\G\\s+([\\w$&]+)[ \\t]*"
			end:   "(?!\\G)|(?=[ \\t]*(?:$|;))"
			beginCaptures:
				1: name: "entity.name.subgraph.mermaid"
			patterns: [{
				# Optional title, enclosed in square brackets
				name:  "string.unquoted.subgraph-title.mermaid"
				begin: "\\G(\\[)"
				end:   "(\\])"
				beginCaptures:
					0: name: "punctuation.definition.string.begin.mermaid"
					1: name: "sublimelinter.gutter-mark.mermaid"
				endCaptures:
					0: name: "punctuation.definition.string.end.mermaid"
					1: name: "sublimelinter.gutter-mark.mermaid"
			}]
		},{
			# Subgraph orientation
			name:  "meta.direction.statement.mermaid"
			match: "(?:\\G|^|(?<=\\s|;|%%))(direction)(?:\\s+(BT|LR|RL|TB|TD))?(?=$|\\s|;)"
			captures:
				1: name: "storage.type.direction.mermaid"
				2: name: "constant.language.orientation.flowchart.mermaid"
		}, include: "#flowchart-innards"]


	# Tooltip for an interactive element, enclosed in double-quotes
	"flowchart-tooltip":
		name:  "string.quoted.double.callback-tooltip.mermaid"
		begin: '"'
		end:   '"'
		beginCaptures: 0: name: "punctuation.definition.string.begin.mermaid"
		endCaptures:   0: name: "punctuation.definition.string.end.mermaid"


	# Quoted URL
	"flowchart-url":
		patterns: [{
			# "Double-quoted"
			name:  "string.quoted.double.link-destination.mermaid"
			begin: '"'
			end:   '"'
			beginCaptures: 0: name: "punctuation.definition.string.begin.mermaid"
			endCaptures:   0: name: "punctuation.definition.string.end.mermaid"
			contentName: "string.other.link.mermaid"
		},{
			# 'Single-quoted'
			name:  "string.quoted.single.link-destination.mermaid"
			begin: "'"
			end:   "'"
			beginCaptures: 0: name: "punctuation.definition.string.begin.mermaid"
			endCaptures:   0: name: "punctuation.definition.string.end.mermaid"
			contentName: "string.other.link.mermaid"
		}]


	# Statement terminator
	terminator:
		name: "punctuation.terminator.statement.mermaid"
		match: ";"
		captures:
			0: name: "sublimelinter.gutter-mark.mermaid"
