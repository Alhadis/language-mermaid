# Git graph: https://mermaid-js.github.io/mermaid/#/gitgraph
hideFromUser: yes
scopeName: "source.mermaid.gitgraph"
patterns: [include: "#main"]

repository:
	main:
		patterns: [
			{include: "source.mermaid#a11y"}
			{include: "source.mermaid#directive"}
			{include: "source.mermaid#comment"}
			{include: "source.mermaid#terminator"}
			{include: "#options"}
			{include: "#command"}
		]


	# Statement reflecting a particular Git operation
	command:
		name:  "meta.${1:/downcase}.statement.mermaid"
		begin: "(?i)(?:^|\\G|(?<=;))[ \\t]*(branch|checkout|cherry-pick|commit|merge|reset)(?=$|\\s)"
		end:   "(?=\\s*(?:$|;))"
		beginCaptures:
			1: name: "keyword.operator.git-action.${1:/downcase}.mermaid"
		patterns: [
			# Branch/commit name
			match: '\\G\\s*([^"\\s:;]+)(?=$|\\s|;)(?!\\s*:)'
			captures:
				1: name: "entity.name.object.mermaid"

			{include: "#string"}
			{include: "#fields"}
		]


	# Stuff that quacks like “key: value”
	fields:
		patterns: [
			{include: "#order"}
			{include: "#tag"}
			{include: "#type"}

			# Fallback for unrecognised fields
			begin: "(?i)(?:^|\\G|(?<=\\s))\\s*((?=\\w)[-\\w]+)\\s*(:)[ \\t]*"
			end:   "(?!\\G)"
			beginCaptures:
				1: name: "variable.assignment.field.user-defined.mermaid"
				2: patterns: [include: "source.mermaid#colon"]
			patterns: [
				{include: "#unquoted-string"}
				{include: "#string"}
			]
		]


	# JSON-encoded options
	options:
		name:  "meta.options.mermaid"
		begin: "(?i)(?:^|\\G|(?<=\\s))(options)[ \\t]*$"
		end:   "^\\s*(end)(?=$|\\s)"
		beginCaptures: 1: name: "keyword.control.options.begin.mermaid"
		endCaptures:   1: name: "keyword.control.options.end.mermaid"
		contentName: "source.embedded.json"
		patterns: [include: "source.json"]


	# Order field: “order: 1”
	order:
		name:  "meta.field.order.mermaid"
		begin: "(?i)(?:^|\\G|(?<=\\s))\\s*(order)\\s*(:)[ \\t]*"
		end:   "(?!\\G)"
		beginCaptures:
			1: name: "variable.assignment.field.mermaid"
			2: patterns: [include: "source.mermaid#colon"]
		patterns: [{
			name: "constant.numeric.decimal.order.index.mermaid"
			match: "\\G[-+]?\\d+(?:\\.\\d+)?"
		}]


	# Double-quoted string
	string:
		name:  "string.quoted.double.mermaid"
		begin: '(?:^|\\G|(?<=\\s))"'
		end:   '(")|([^"\\r\\n]*)$'
		beforeCaptures:
			0: name: "punctuation.definition.string.begin.mermaid"
		endCaptures:
			1: name: "punctuation.definition.string.end.mermaid"
			2: name: "invalid.illegal.unclosed-string.mermaid"
		patterns: [include: "source.mermaid#entity"]


	# Tag field: “tag "v1.0.0"”
	tag:
		name:  "meta.field.tag.mermaid"
		begin: "(?i)(?:^|\\G|(?<=\\s))\\s*(tag)\\s*(:)[ \\t]*"
		end:   "(?!\\G)"
		beginCaptures:
			1: name: "variable.assignment.field.mermaid"
			2: patterns: [include: "source.mermaid#colon"]
		patterns: [include: "#string"]


	# Type field: “type: …”
	type:
		name:  "meta.field.type.mermaid"
		begin: "(?i)(?:^|\\G|(?<=\\s))\\s*(type)\\s*(:)[ \\t]*"
		end:   "(?!\\G)"
		beginCaptures:
			1: name: "variable.assignment.field.mermaid"
			2: patterns: [include: "source.mermaid#colon"]
		patterns: [{
			name: "constant.language.merge-type.mermaid"
			match: "\\G(HIGHLIGHT|NORMAL|REVERSE)(?=$|\\s)"
		},{
			name: "invalid.illegal.unrecognised-type.mermaid"
			match: "\\G[^\\s;]+"
		}]

	# Bareword argument used in fallback field highlighting
	"unquoted-string":
		name: "string.unquoted.bareword.mermaid"
		match: '(?:\\G)[^\\s":;]+(?!\\s*:)'
